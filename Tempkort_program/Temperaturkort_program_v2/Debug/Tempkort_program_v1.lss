
Tempkort_program_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800100  00800100  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097a  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c3  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000697  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072c  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000026a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__vector_20>
  52:	00 00       	nop
  54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c0       	rjmp	.+432    	; 0x222 <__vector_28>
  72:	00 00       	nop
  74:	08 c1       	rjmp	.+528    	; 0x286 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 38       	cpi	r26, 0x8A	; 138
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	32 d0       	rcall	.+100    	; 0x10e <main>
  aa:	96 c1       	rjmp	.+812    	; 0x3d8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <max31855_init>:

#include <avr/io.h>


void max31855_init(void){
	DDRB |= _BV(SCK) | _BV(MISO) | _BV(CS1);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 6b       	ori	r24, 0xB0	; 176
  b2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(_BV(MOSI));
  b4:	26 98       	cbi	0x04, 6	; 4
	SPCR = _BV(SPE) | _BV(MSTR);
  b6:	80 e5       	ldi	r24, 0x50	; 80
  b8:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= _BV(CS1);	// Set Chip Select line high
  ba:	2c 9a       	sbi	0x05, 4	; 5
  bc:	08 95       	ret

000000be <max31855_get>:
}


uint32_t max31855_get(void){
	/* Begin read from thermocouple interface IC */
	PORTB &= ~(_BV(CS1));
  be:	2c 98       	cbi	0x05, 4	; 5
	
	SPDR = 0x00;
  c0:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <max31855_get+0x4>
	uint8_t max_part_1 = SPDR;
  c8:	4e b5       	in	r20, 0x2e	; 46
	
	SPDR = 0x00;
  ca:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
  cc:	0d b4       	in	r0, 0x2d	; 45
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <max31855_get+0xe>
	uint8_t max_part_2 = SPDR;
  d2:	6e b5       	in	r22, 0x2e	; 46

	SPDR = 0x00;
  d4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
  d6:	0d b4       	in	r0, 0x2d	; 45
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <max31855_get+0x18>
	uint8_t max_part_3 = SPDR;
  dc:	3e b5       	in	r19, 0x2e	; 46
	
	SPDR = 0x00;
  de:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <max31855_get+0x22>
	uint8_t max_part_4 = SPDR;
  e6:	2e b5       	in	r18, 0x2e	; 46
	
	PORTB |= _BV(CS1);
  e8:	2c 9a       	sbi	0x05, 4	; 5
	/* End read from thermocouple interface IC */
	
	uint32_t result = max_part_1;
	result = (result << 8) | max_part_2;
  ea:	86 2f       	mov	r24, r22
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	94 2b       	or	r25, r20
	result = (result << 8) | max_part_3;
  f4:	ba 2f       	mov	r27, r26
  f6:	a9 2f       	mov	r26, r25
  f8:	98 2f       	mov	r25, r24
  fa:	88 27       	eor	r24, r24
  fc:	83 2b       	or	r24, r19
	result = (result << 8) | max_part_4;
  fe:	ba 2f       	mov	r27, r26
 100:	a9 2f       	mov	r26, r25
 102:	98 2f       	mov	r25, r24
 104:	88 27       	eor	r24, r24
 106:	bc 01       	movw	r22, r24
 108:	cd 01       	movw	r24, r26
 10a:	62 2b       	or	r22, r18
	
	return result;
 10c:	08 95       	ret

0000010e <main>:
#include <avr/interrupt.h>
#include <stdlib.h>
#include "uart.h"
#include "max31855.h"

int main(void){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	a0 97       	sbiw	r28, 0x20	; 32
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	
	uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 122:	8b e0       	ldi	r24, 0x0B	; 11
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	dd d0       	rcall	.+442    	; 0x2e2 <uart1_init>
	
	max31855_init();
 128:	c2 df       	rcall	.-124    	; 0xae <max31855_init>
	
	sei();	// Enable interrupts required for UART operation
 12a:	78 94       	sei
	while(1){
		char buffer[32];	// Needed for UART string transmission
		
		
		/* Acquire one sample from sensor IC */
		uint32_t result = max31855_get();
 12c:	c8 df       	rcall	.-112    	; 0xbe <max31855_get>
		
		
		/* Mask out only what we want to send */
		uint32_t mask = 0xFFF00000;
		uint32_t masked_result = result & mask;
		uint16_t send_this = (masked_result >> 20);
 12e:	05 2e       	mov	r0, r21
 130:	54 e1       	ldi	r21, 0x14	; 20
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	77 95       	ror	r23
 138:	67 95       	ror	r22
 13a:	5a 95       	dec	r21
 13c:	d1 f7       	brne	.-12     	; 0x132 <main+0x24>
 13e:	50 2d       	mov	r21, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 140:	2a e0       	ldi	r18, 0x0A	; 10
 142:	ae 01       	movw	r20, r28
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	08 d1       	rcall	.+528    	; 0x35a <__ltoa_ncheck>
		
		
		/* Transmit temperature through UART */
		uart1_puts(ltoa(send_this,buffer,10));
 14a:	f9 d0       	rcall	.+498    	; 0x33e <uart1_puts>
		uart1_putc('\n');
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	e2 d0       	rcall	.+452    	; 0x314 <uart1_putc>
		uart1_putc('\r');
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	e0 d0       	rcall	.+448    	; 0x314 <uart1_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	9b e6       	ldi	r25, 0x6B	; 107
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x4a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x50>
 15e:	00 00       	nop
		
		
		_delay_ms(10);
	}
 160:	e5 cf       	rjmp	.-54     	; 0x12c <main+0x1e>

00000162 <__vector_20>:
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	0b b6       	in	r0, 0x3b	; 59
 16e:	0f 92       	push	r0
 170:	2f 93       	push	r18
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	80 91 c0 00 	lds	r24, 0x00C0
 17e:	20 91 c6 00 	lds	r18, 0x00C6
 182:	8c 71       	andi	r24, 0x1C	; 28
 184:	e0 91 47 01 	lds	r30, 0x0147
 188:	ef 5f       	subi	r30, 0xFF	; 255
 18a:	ef 71       	andi	r30, 0x1F	; 31
 18c:	90 91 46 01 	lds	r25, 0x0146
 190:	e9 17       	cp	r30, r25
 192:	39 f0       	breq	.+14     	; 0x1a2 <__vector_20+0x40>
 194:	e0 93 47 01 	sts	0x0147, r30
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e6 5b       	subi	r30, 0xB6	; 182
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	20 83       	st	Z, r18
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <__vector_20+0x42>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 91 45 01 	lds	r25, 0x0145
 1a8:	89 2b       	or	r24, r25
 1aa:	80 93 45 01 	sts	0x0145, r24
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_21>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	90 91 49 01 	lds	r25, 0x0149
 1e0:	80 91 48 01 	lds	r24, 0x0148
 1e4:	98 17       	cp	r25, r24
 1e6:	69 f0       	breq	.+26     	; 0x202 <__vector_21+0x3c>
 1e8:	e0 91 48 01 	lds	r30, 0x0148
 1ec:	ef 5f       	subi	r30, 0xFF	; 255
 1ee:	ef 71       	andi	r30, 0x1F	; 31
 1f0:	e0 93 48 01 	sts	0x0148, r30
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e6 59       	subi	r30, 0x96	; 150
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	80 93 c6 00 	sts	0x00C6, r24
 200:	05 c0       	rjmp	.+10     	; 0x20c <__vector_21+0x46>
 202:	e1 ec       	ldi	r30, 0xC1	; 193
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8f 7d       	andi	r24, 0xDF	; 223
 20a:	80 83       	st	Z, r24
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_28>:
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0b b6       	in	r0, 0x3b	; 59
 22e:	0f 92       	push	r0
 230:	2f 93       	push	r18
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	80 91 c8 00 	lds	r24, 0x00C8
 23e:	20 91 ce 00 	lds	r18, 0x00CE
 242:	8c 71       	andi	r24, 0x1C	; 28
 244:	e0 91 02 01 	lds	r30, 0x0102
 248:	ef 5f       	subi	r30, 0xFF	; 255
 24a:	ef 71       	andi	r30, 0x1F	; 31
 24c:	90 91 01 01 	lds	r25, 0x0101
 250:	e9 17       	cp	r30, r25
 252:	39 f0       	breq	.+14     	; 0x262 <__vector_28+0x40>
 254:	e0 93 02 01 	sts	0x0102, r30
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	eb 5f       	subi	r30, 0xFB	; 251
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	20 83       	st	Z, r18
 260:	01 c0       	rjmp	.+2      	; 0x264 <__vector_28+0x42>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	90 91 00 01 	lds	r25, 0x0100
 268:	89 2b       	or	r24, r25
 26a:	80 93 00 01 	sts	0x0100, r24
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0b be       	out	0x3b, r0	; 59
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_29>:
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0b b6       	in	r0, 0x3b	; 59
 292:	0f 92       	push	r0
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	90 91 04 01 	lds	r25, 0x0104
 2a0:	80 91 03 01 	lds	r24, 0x0103
 2a4:	98 17       	cp	r25, r24
 2a6:	69 f0       	breq	.+26     	; 0x2c2 <__vector_29+0x3c>
 2a8:	e0 91 03 01 	lds	r30, 0x0103
 2ac:	ef 5f       	subi	r30, 0xFF	; 255
 2ae:	ef 71       	andi	r30, 0x1F	; 31
 2b0:	e0 93 03 01 	sts	0x0103, r30
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	eb 5d       	subi	r30, 0xDB	; 219
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	80 81       	ld	r24, Z
 2bc:	80 93 ce 00 	sts	0x00CE, r24
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_29+0x46>
 2c2:	e9 ec       	ldi	r30, 0xC9	; 201
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	80 83       	st	Z, r24
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0b be       	out	0x3b, r0	; 59
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <uart1_init>:
 2e2:	10 92 04 01 	sts	0x0104, r1
 2e6:	10 92 03 01 	sts	0x0103, r1
 2ea:	10 92 02 01 	sts	0x0102, r1
 2ee:	10 92 01 01 	sts	0x0101, r1
 2f2:	99 23       	and	r25, r25
 2f4:	1c f4       	brge	.+6      	; 0x2fc <uart1_init+0x1a>
 2f6:	22 e0       	ldi	r18, 0x02	; 2
 2f8:	20 93 c8 00 	sts	0x00C8, r18
 2fc:	90 78       	andi	r25, 0x80	; 128
 2fe:	90 93 cd 00 	sts	0x00CD, r25
 302:	80 93 cc 00 	sts	0x00CC, r24
 306:	88 e9       	ldi	r24, 0x98	; 152
 308:	80 93 c9 00 	sts	0x00C9, r24
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	80 93 ca 00 	sts	0x00CA, r24
 312:	08 95       	ret

00000314 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 314:	20 91 04 01 	lds	r18, 0x0104
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 31c:	90 91 03 01 	lds	r25, 0x0103
 320:	29 17       	cp	r18, r25
 322:	e1 f3       	breq	.-8      	; 0x31c <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 324:	e2 2f       	mov	r30, r18
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	eb 5d       	subi	r30, 0xDB	; 219
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 32e:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 332:	e9 ec       	ldi	r30, 0xC9	; 201
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	80 83       	st	Z, r24
 33c:	08 95       	ret

0000033e <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
    while (*s) 
 344:	88 81       	ld	r24, Y
 346:	88 23       	and	r24, r24
 348:	29 f0       	breq	.+10     	; 0x354 <uart1_puts+0x16>
 34a:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(*s++);
 34c:	e3 df       	rcall	.-58     	; 0x314 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
 34e:	89 91       	ld	r24, Y+
 350:	81 11       	cpse	r24, r1
 352:	fc cf       	rjmp	.-8      	; 0x34c <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <__ltoa_ncheck>:
 35a:	bb 27       	eor	r27, r27
 35c:	2a 30       	cpi	r18, 0x0A	; 10
 35e:	51 f4       	brne	.+20     	; 0x374 <__ltoa_ncheck+0x1a>
 360:	99 23       	and	r25, r25
 362:	42 f4       	brpl	.+16     	; 0x374 <__ltoa_ncheck+0x1a>
 364:	bd e2       	ldi	r27, 0x2D	; 45
 366:	90 95       	com	r25
 368:	80 95       	com	r24
 36a:	70 95       	com	r23
 36c:	61 95       	neg	r22
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8f 4f       	sbci	r24, 0xFF	; 255
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	01 c0       	rjmp	.+2      	; 0x378 <__ultoa_common>

00000376 <__ultoa_ncheck>:
 376:	bb 27       	eor	r27, r27

00000378 <__ultoa_common>:
 378:	fa 01       	movw	r30, r20
 37a:	a6 2f       	mov	r26, r22
 37c:	62 17       	cp	r22, r18
 37e:	71 05       	cpc	r23, r1
 380:	81 05       	cpc	r24, r1
 382:	91 05       	cpc	r25, r1
 384:	33 0b       	sbc	r19, r19
 386:	30 fb       	bst	r19, 0
 388:	66 f0       	brts	.+24     	; 0x3a2 <__ultoa_common+0x2a>
 38a:	aa 27       	eor	r26, r26
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	aa 1f       	adc	r26, r26
 396:	a2 17       	cp	r26, r18
 398:	10 f0       	brcs	.+4      	; 0x39e <__ultoa_common+0x26>
 39a:	a2 1b       	sub	r26, r18
 39c:	63 95       	inc	r22
 39e:	38 50       	subi	r19, 0x08	; 8
 3a0:	a9 f7       	brne	.-22     	; 0x38c <__ultoa_common+0x14>
 3a2:	a0 5d       	subi	r26, 0xD0	; 208
 3a4:	aa 33       	cpi	r26, 0x3A	; 58
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <__ultoa_common+0x32>
 3a8:	a9 5d       	subi	r26, 0xD9	; 217
 3aa:	a1 93       	st	Z+, r26
 3ac:	36 f7       	brtc	.-52     	; 0x37a <__ultoa_common+0x2>
 3ae:	b1 11       	cpse	r27, r1
 3b0:	b1 93       	st	Z+, r27
 3b2:	10 82       	st	Z, r1
 3b4:	ca 01       	movw	r24, r20
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <strrev>

000003b8 <strrev>:
 3b8:	dc 01       	movw	r26, r24
 3ba:	fc 01       	movw	r30, r24
 3bc:	67 2f       	mov	r22, r23
 3be:	71 91       	ld	r23, Z+
 3c0:	77 23       	and	r23, r23
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <strrev+0x4>
 3c4:	32 97       	sbiw	r30, 0x02	; 2
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <strrev+0x18>
 3c8:	7c 91       	ld	r23, X
 3ca:	6d 93       	st	X+, r22
 3cc:	70 83       	st	Z, r23
 3ce:	62 91       	ld	r22, -Z
 3d0:	ae 17       	cp	r26, r30
 3d2:	bf 07       	cpc	r27, r31
 3d4:	c8 f3       	brcs	.-14     	; 0x3c8 <strrev+0x10>
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
