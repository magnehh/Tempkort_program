
Temperaturkort_program_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800100  00800100  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c5  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000226  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ef  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000653  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00001d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__vector_20>
  52:	00 00       	nop
  54:	6e c0       	rjmp	.+220    	; 0x132 <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	8e c0       	rjmp	.+284    	; 0x18e <__vector_28>
  72:	00 00       	nop
  74:	be c0       	rjmp	.+380    	; 0x1f2 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 38       	cpi	r26, 0x8A	; 138
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	ff c0       	rjmp	.+510    	; 0x2aa <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include <avr/interrupt.h>
#include "uart.h"

int main(void){
	
	uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  ae:	8b e0       	ldi	r24, 0x0B	; 11
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	cd d0       	rcall	.+410    	; 0x24e <uart1_init>
	
	sei();
  b4:	78 94       	sei
	
	while(1){
		uart1_putc('A');
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	e3 d0       	rcall	.+454    	; 0x280 <uart1_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	8f eb       	ldi	r24, 0xBF	; 191
  be:	96 e0       	ldi	r25, 0x06	; 6
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x12>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x1c>
  ca:	00 00       	nop
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0x8>

000000ce <__vector_20>:
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	80 91 c0 00 	lds	r24, 0x00C0
  ea:	20 91 c6 00 	lds	r18, 0x00C6
  ee:	8c 71       	andi	r24, 0x1C	; 28
  f0:	e0 91 47 01 	lds	r30, 0x0147
  f4:	ef 5f       	subi	r30, 0xFF	; 255
  f6:	ef 71       	andi	r30, 0x1F	; 31
  f8:	90 91 46 01 	lds	r25, 0x0146
  fc:	e9 17       	cp	r30, r25
  fe:	39 f0       	breq	.+14     	; 0x10e <__vector_20+0x40>
 100:	e0 93 47 01 	sts	0x0147, r30
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e6 5b       	subi	r30, 0xB6	; 182
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	20 83       	st	Z, r18
 10c:	01 c0       	rjmp	.+2      	; 0x110 <__vector_20+0x42>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	90 91 45 01 	lds	r25, 0x0145
 114:	89 2b       	or	r24, r25
 116:	80 93 45 01 	sts	0x0145, r24
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0b be       	out	0x3b, r0	; 59
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_21>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	0b b6       	in	r0, 0x3b	; 59
 13e:	0f 92       	push	r0
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
 148:	90 91 49 01 	lds	r25, 0x0149
 14c:	80 91 48 01 	lds	r24, 0x0148
 150:	98 17       	cp	r25, r24
 152:	69 f0       	breq	.+26     	; 0x16e <__vector_21+0x3c>
 154:	e0 91 48 01 	lds	r30, 0x0148
 158:	ef 5f       	subi	r30, 0xFF	; 255
 15a:	ef 71       	andi	r30, 0x1F	; 31
 15c:	e0 93 48 01 	sts	0x0148, r30
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e6 59       	subi	r30, 0x96	; 150
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
 168:	80 93 c6 00 	sts	0x00C6, r24
 16c:	05 c0       	rjmp	.+10     	; 0x178 <__vector_21+0x46>
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0b be       	out	0x3b, r0	; 59
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_28>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	80 91 c8 00 	lds	r24, 0x00C8
 1aa:	20 91 ce 00 	lds	r18, 0x00CE
 1ae:	8c 71       	andi	r24, 0x1C	; 28
 1b0:	e0 91 02 01 	lds	r30, 0x0102
 1b4:	ef 5f       	subi	r30, 0xFF	; 255
 1b6:	ef 71       	andi	r30, 0x1F	; 31
 1b8:	90 91 01 01 	lds	r25, 0x0101
 1bc:	e9 17       	cp	r30, r25
 1be:	39 f0       	breq	.+14     	; 0x1ce <__vector_28+0x40>
 1c0:	e0 93 02 01 	sts	0x0102, r30
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	eb 5f       	subi	r30, 0xFB	; 251
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	20 83       	st	Z, r18
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <__vector_28+0x42>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	90 91 00 01 	lds	r25, 0x0100
 1d4:	89 2b       	or	r24, r25
 1d6:	80 93 00 01 	sts	0x0100, r24
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_29>:
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	0b b6       	in	r0, 0x3b	; 59
 1fe:	0f 92       	push	r0
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	90 91 04 01 	lds	r25, 0x0104
 20c:	80 91 03 01 	lds	r24, 0x0103
 210:	98 17       	cp	r25, r24
 212:	69 f0       	breq	.+26     	; 0x22e <__vector_29+0x3c>
 214:	e0 91 03 01 	lds	r30, 0x0103
 218:	ef 5f       	subi	r30, 0xFF	; 255
 21a:	ef 71       	andi	r30, 0x1F	; 31
 21c:	e0 93 03 01 	sts	0x0103, r30
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	eb 5d       	subi	r30, 0xDB	; 219
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	80 81       	ld	r24, Z
 228:	80 93 ce 00 	sts	0x00CE, r24
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_29+0x46>
 22e:	e9 ec       	ldi	r30, 0xC9	; 201
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	80 83       	st	Z, r24
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0b be       	out	0x3b, r0	; 59
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <uart1_init>:
 24e:	10 92 04 01 	sts	0x0104, r1
 252:	10 92 03 01 	sts	0x0103, r1
 256:	10 92 02 01 	sts	0x0102, r1
 25a:	10 92 01 01 	sts	0x0101, r1
 25e:	99 23       	and	r25, r25
 260:	1c f4       	brge	.+6      	; 0x268 <uart1_init+0x1a>
 262:	22 e0       	ldi	r18, 0x02	; 2
 264:	20 93 c8 00 	sts	0x00C8, r18
 268:	90 78       	andi	r25, 0x80	; 128
 26a:	90 93 cd 00 	sts	0x00CD, r25
 26e:	80 93 cc 00 	sts	0x00CC, r24
 272:	88 e9       	ldi	r24, 0x98	; 152
 274:	80 93 c9 00 	sts	0x00C9, r24
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	80 93 ca 00 	sts	0x00CA, r24
 27e:	08 95       	ret

00000280 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 280:	20 91 04 01 	lds	r18, 0x0104
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 288:	90 91 03 01 	lds	r25, 0x0103
 28c:	29 17       	cp	r18, r25
 28e:	e1 f3       	breq	.-8      	; 0x288 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 290:	e2 2f       	mov	r30, r18
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	eb 5d       	subi	r30, 0xDB	; 219
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 29a:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 29e:	e9 ec       	ldi	r30, 0xC9	; 201
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
